type Vec3 {
    x: float,
    y: float,
    z: float,
}

type Ray {
    origin: float,
    direction: float,
}

type Range with iterator {
    start: int,
    end: int,
}

def main() -> int {
    let a = Ray(0.0, 0.0);
}

def range(start: int, end: int) -> iterator {
    return Range(start, end);
}

def pow(a: int, b: int) -> int {
    let result = a;

    for i in range(0, b) {
        result = result * result;
    }

    return result;
}

//native def sqrt(x: int) -> float;

//internal def length(self: Vec3) -> float {
//    return 
//}
//
//internal def mod(self: int) -> int {
//    if self < 0 {
//        return -self;
//    }
//
//    return self;
//}
//
//internal def bytes(self: int) -> int {
//    return 4;
//}