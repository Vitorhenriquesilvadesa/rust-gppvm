native def input() -> str;
native def print(x: object) -> void;
native def float(x: str) -> float;
native def len(x: list) -> int;
native def str_len(x: str) -> int;
native def int(x: str) -> int;
native def random_range(low: int, high: int) -> int;
native def append(x: list, value: object) -> void;
native def args() -> list;
native def exit(code: int) -> void;
native def int_to_float(value: int) -> float;
native def float_to_int(value: float) -> int;

native def str_eq(a: str, b: str) -> bool;
native def str_to_upper(a: str) -> str;
native def str_to_lower(a: str) -> str;
native def str_replace(a: str, from: str, to: str) -> str;
native def str_split(a: str, delim: str) -> list;
native def str_starts_with(a: str, b: str) -> bool;
native def str_ends_with(a: str, b: str) -> bool;
native def str_contains(a: str, b: str) -> bool;
native def str_find(haystack: str, needle: str) -> int;
native def str_slice(s: str, start: int, end: int) -> str;
native def str_concat(a: str, b: str) -> str;
native def str_len(s: str) -> int;
native def to_string(value: object) -> str;

internal def contains(self: str, substr: str) -> bool {
    return str_contains(self, substr);
}

internal def starts_with(self: str, prefix: str) -> bool {
    return str_starts_with(self, prefix);
}

internal def ends_with(self: str, suffix: str) -> bool {
    return str_ends_with(self, suffix);
}

internal def index_of(self: str, substr: str) -> int {
    return str_find(self, substr);
}

internal def slice(self: str, start: int, end: int) -> str {
    return str_slice(self, start, end);
}

internal def concat(self: str, other: str) -> str {
    return str_concat(self, other);
}

internal def to_string(self: str) -> str {
    return self;
}

internal def to_upper(self: str) -> str {
    return str_to_upper(self);
}

internal def length(self: str) -> int {
    return str_len(self);
}

native def int_abs(x: int) -> int;
native def int_is_even(x: int) -> bool;
native def int_is_odd(x: int) -> bool;
native def int_sign(x: int) -> int;
native def int_max(a: int, b: int) -> int;
native def int_min(a: int, b: int) -> int;
native def int_clamp(x: int, min: int, max: int) -> int;
native def exception(message: str) -> void;

internal def abs(self: int) -> int {
    return int_abs(self);
}

internal def is_even(self: int) -> bool {
    return int_is_even(self);
}

internal def is_odd(self: int) -> bool {
    return int_is_odd(self);
}

internal def sign(self: int) -> int {
    return int_sign(self);
}

internal def clamp(self: int, min: int, max: int) -> int {
    return int_clamp(self, min, max);
}

internal def max(self: int, other: int) -> int {
    return int_max(self, other);
}

internal def min(self: int, other: int) -> int {
    return int_min(self, other);
}

type Vec3 {
    x: float,
    y: float,
    z: float,
}

type Person {
    name: str,
    age: int,
}

def main() -> void {
    let pos = Vec3(0.4, 1.2, 3.3);
    let p = Person("Fulano", 30);

    let { x, y, z } = pos;
    let { name, age } = p;
    
    print(x);
    print(y);
    print(z);
    print(name);
    print(age);
}
