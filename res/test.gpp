native def print(x: object) -> void;
native def len(l: list) -> int;
native def list_append(l: list, x: object) -> void;
native def list_pop(l: list, i: int) -> void;

internal def length(self: list) -> int {
    return len(self);
}

internal def append(self: list, x: object) -> void {
    list_append(self, x);
}

internal def pop(self: list, index: int) -> void {
    list_pop(self, index);
}

def main() -> void {
    let x = [1, 2, 3];
    x.append(4);
    x.pop(0);

    print(x);
}